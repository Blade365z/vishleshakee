//findHistroy using setinterval 

// const findHistoryID = () => { 
//     getTweetInfo(currentQuery).then(response => {
     
//         let type='',tempArr=[];
//         if (response.type === "Tweet") {
//             type = 'Tweet';
//             tempArr = { 'id': currentQuery, 'type': type, 'source': response.retweet_source_id }
//             sourceArray.push(tempArr);
//             console.log(sourceArray)
//             printTweetOnDiv(response, 3, type);
//             clearInterval(trackTweetHistory);
//         } else if (response.type === 'retweet') {
//             type = 'retweet';
//             tempArr = { 'id': currentQuery, 'type': type, 'source': response.retweet_source_id }
//             sourceArray.push(tempArr);
//             let offset = divOffsetFlag === 0 ? 1 : 2;
//             printTweetOnDiv(response, offset, type);
//             currentQuery=response.retweet_source_id
//         } else if (response.type === "QuotedTweet") {
//             type = 'QuotedTweet';
//             tempArr = { 'id': currentQuery, 'type': type, 'source': response.quoted_source_id }
//             sourceArray.push(tempArr);
//             let offset = divOffsetFlag === 0 ? 1 : 2;
//             printTweetOnDiv(response, offset, type);
//             currentQuery=response.quoted_source_id

//         } else if (response.type === "Reply") {
//             type = 'Reply';
//             tempArr = { 'id': currentQuery, 'type': type, 'source': response.replyto_source_id }
//             sourceArray.push(tempArr);
//             let offset = divOffsetFlag === 0 ? 1 : 2;
//             printTweetOnDiv(response, offset, type);
//             currentQuery=response.replyto_source_id
//         }
//     });
// }


//Put the below code in documnet.ready()
    // trackTweetHistory = setInterval(findHistoryID, 400);





const tracker = async (searhIDTemp) => {
    // This code this written to bring down the time complexity from a quadratic time complexity to linear.
    let foundSourceFlag = 0;
    let maximumDependenceLevel = 3 //i.e : 0 to 2 --> 3 steps
    let type = '', tid;
    for (let i = 0; i <= maximumDependenceLevel; i++) {
        await getTweetInfo(searhIDTemp).then(response => {
            tid = response.tid;
            if (response.type === 'Tweet') {
                foundSourceFlag = 1;
                type = 'Tweet';
                sourceTweet = tid;
                historyJSON[tid] = { 'id': tid, 'type': type, 'source': null };
                printTweetOnDiv(response, 3, type);

            }
            else if (response.type === 'retweet') {
                type = 'retweet';
                historyJSON[tid] = { 'id': tid, 'type': type, 'source': response.retweet_source_id };
                searhIDTemp = response.retweet_source_id;
                let offset = divOffsetFlag === 0 ? 1 : 2;
                printTweetOnDiv(response, offset, type);

            } else if (response.type === "QuotedTweet") {
                type = 'QuotedTweet';
                historyJSON[tid] = { 'id': tid, 'type': type, 'source': response.quoted_source_id };
                searhIDTemp = response.quoted_source_id;
                let offset = divOffsetFlag === 0 ? 1 : 2;
                printTweetOnDiv(response, offset, type);

            } else if (response.type === "Reply") {
                type = 'Reply';
                historyJSON[tid] = { 'id': tid, 'type': type, 'source': response.replyto_source_id };
                searhIDTemp = response.replyto_source_id;
                let offset = divOffsetFlag === 0 ? 1 : 2;
                printTweetOnDiv(response, offset, type);
            }

        });
        if (foundSourceFlag == 1) {
            break;
        }

    }
    analysisHistory.push(historyJSON);
    printTweetHierarchy(historyJSON);
    getTweetInfo(historyJSON[sourceTweet]['id']).then(tweetRawData => {
        if (tweetRawData) {
            let dateArr = tweetRawData.datetime.split(' ');
            fromDate = dateArr[0];
            toDate = getCurrentDate();
            getDatesDist(sourceTweet, fromDate, toDate, 'all').then(response => {
                console.log(response);
                createTweetAnalysis(sourceTweet, fromDate, toDate, 'trackAnalysisMain', tweetRawData.author_profile_image, tweetRawData.author, response);

            })
            //    initiateTweetAnalysis(historyJSON[sourceTweet]['id'], dateArr[0], toDate, historyJSON[sourceTweet]['type'],response)
        }
    });

}






Tweet Tracking::
12th December 2020 :-
    a.change query hieracrchy direction
    b.group by month
    c.enable the freq. charts 
    





Cases ::


1. http://172.16.117.160/vishleshakee/tracking?tweetID=1322643164503642112
2. Narendra modi :  https://www.iitg.ac.in/cseweb/osint/vishleshakee-v2/tracking?tweetID=1333475193654751239

3.http://172.16.117.160/vishleshakee/tracking?tweetID=1322732377920004097

// reply consists freq
4.http://172.16.117.160/vishleshakee/tracking?tweetID=1322571106314788866
